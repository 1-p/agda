(;;;;;;;;;;;;;;;;;;;;;;;;; Generated by Agda ;;;;;;;;;;;;;;;;;;;;;;;;;)

#NAME Append.

Nat : Type.
zero : Nat.
suc : Nat -> Nat.

def plus : Nat -> Nat -> Nat.
[_y] plus zero _y --> _y.
[_x, _y] plus (suc _x) _y --> suc (plus _x _y).

Vec : Nat -> Type.
vnil : Vec zero.
vcons : _n : Nat -> Nat -> Vec _n -> Vec (suc _n).

def append : _n : Nat -> _m : Nat -> Vec _n -> Vec _m -> Vec (plus _n _m).
[_m, _ys] append _ _m vnil _ys --> _ys.
[_n, _m, _x, _xs, _ys] append _ _m (vcons _n _x _xs) _ys --> vcons (plus _n _m) _x (append _n _m _xs _ys).

(; EOF ;)
