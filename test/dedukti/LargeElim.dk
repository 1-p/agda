(;;;;;;;;;;;;;;;;;;;;;;;;; Generated by Agda ;;;;;;;;;;;;;;;;;;;;;;;;;)

#NAME LargeElim.

Empty : Type.
Unit : Type.
triv : Unit.
Bool : Type.
true : Bool.
false : Bool.
Nat : Type.
zero : Nat.
suc : Nat -> Nat.

def leq : Nat -> Nat -> Bool.
[_y] leq zero _y --> true.
[_x] leq (suc _x) zero --> false.
[_x, _y] leq (suc _x) (suc _y) --> leq _x _y.

def IsTrue : Bool -> Type.
[] IsTrue true --> Unit.
[] IsTrue false --> Empty.

def refl : _x : Nat -> IsTrue (leq _x _x).
[] refl zero --> triv.
[_x] refl (suc _x) --> refl _x.

def trans : _x : Nat -> _y : Nat -> _z : Nat -> IsTrue (leq _x _y) -> IsTrue (leq _y _z) -> IsTrue (leq _x _z).
[_y, _z, _p, _q] trans zero _y _z _p _q --> triv.
[_x, _y, _z, _p, _q] trans (suc _x) (suc _y) (suc _z) _p _q --> trans _x _y _z _p _q.

set : Type.
empty : set.
unit : set.
bool : set.
nat : set.
isTrue : Bool -> set.

def El : set -> Type.
[] El empty --> Empty.
[] El unit --> Unit.
[] El bool --> Bool.
[] El nat --> Nat.
[_b] El (isTrue _b) --> IsTrue _b.

Either : set -> set -> Type.
inl : _a : set -> _b : set -> El _a -> Either _a _b.
inr : _a : set -> _b : set -> El _b -> Either _a _b.

def total : _x : Nat -> _y : Nat -> Either (isTrue (leq _x _y)) (isTrue (leq _y _x)).
[_y] total zero _y --> inl (isTrue (leq zero _y)) (isTrue (leq _y zero)) triv.
[_x] total (suc _x) zero --> inr (isTrue (leq (suc _x) zero)) (isTrue (leq zero (suc _x))) triv.
[_x, _y] total (suc _x) (suc _y) --> total _x _y.

(; EOF ;)
