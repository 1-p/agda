(;;;;;;;;;;;;;;;;;;;;;;;;; Generated by Agda ;;;;;;;;;;;;;;;;;;;;;;;;;)

#NAME Fibonacci.

Nat : Type.
zero : Nat.
suc : Nat -> Nat.

def plus : Nat -> Nat -> Nat.
[_y] plus zero _y --> _y.
[_x, _y] plus (suc _x) _y --> suc (plus _x _y).

Stream : Type.
cons : _head : Nat -> _tail : Stream -> Stream.

def head : Stream -> Nat.
[_head, _tail] head (cons _head _tail) --> _head.

def tail : Stream -> Stream.
[_head, _tail] tail (cons _head _tail) --> _tail.

def ones : Stream.
[] head ones --> suc zero.
[] tail ones --> ones.

def plusS : Stream -> Stream -> Stream.
[_s, _t] head (plusS _s _t) --> plus (head _s) (head _t).
[_s, _t] tail (plusS _s _t) --> plusS (tail _s) (tail _t).

def fib : Stream.
[] head fib --> zero.
[] head (tail fib) --> suc zero.
[] tail (tail fib) --> plusS fib (tail fib).

def nth : Nat -> Stream -> Nat.
[_s] nth zero _s --> head _s.
[_n, _s] nth (suc _n) _s --> nth _n (tail _s).

(; EOF ;)
